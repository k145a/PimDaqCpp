/** Program to load a PRU program that flashes an LED until a button is
 *   pressed. By Derek Molloy, for the book Exploring BeagleBone
 *   based on the example code at:
 *   http://processors.wiki.ti.com/index.php/PRU_Linux_Application_Loader_API_Guide
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <prussdrv.h>
#include <pruss_intc_mapping.h>
#include <unistd.h>
#include <pthread.h>
#include <iostream>
#include "GPIO.h"

#include <fstream>
#include <vector>

#include "../rapidxml-1.13/rapidxml.hpp"
//#include "../rapidxml-1.13/rapidxml_utils.hpp"
//#include "../rapidxml-1.13/rapidxml_iterators.hpp"

#define PRU_NUM	0   // using PRU0 for these examples

/*** test definitions ****/
#define HWREG(x) (*((volatile unsigned int * ) (x)))

using namespace exploringBB;
using namespace std;
using namespace rapidxml;

int x1, iret1, iret2;

GPIO *outGPIO, *inGPIO;           //global pointers

int activateLED(int var) {
	outGPIO->streamWrite(HIGH);    //turn on the LED
	cout << "Button Pressed" << endl;
	return 0;
}

string getFileContents(const std::string& filename) {
	string retval = "";

	ifstream is(filename.c_str(), ios::in | ios::binary);
	if (is.fail()) {
		//throw Exception
	}
	char buf[512];
	while (is.read(buf, sizeof(buf)).gcount() > 0) {
		retval.append(buf, is.gcount());
	}

	is.close();

	return retval;
}

/*******************************************/
// function run in thread while waiting for input
void *threadInputDetect(void *value) {
	// Wait for event completion from PRU, returns the PRU_EVTOUT_0 number
	int n = prussdrv_pru_wait_event(PRU_EVTOUT_0);
	prussdrv_pru_disable(PRU_NUM);
	prussdrv_exit();
	printf("EBB PRU program completed, event number %d.\n", n);
	return 0;
}

int xmlLoad1(void) {

	// With the xml example above this is the <document/> node
	xml_document <> doc;
	xml_node <> * root_node;
	// Read the xml file into a vector
	ifstream theFile("../src/GPIOSetup1.xml");
	if (theFile.good()) {
		vector<char> buffer((istreambuf_iterator<char>(theFile)),
				istreambuf_iterator<char>());
		buffer.push_back('\0');
		// Parse the buffer using the xml file parsing library into doc
		doc.parse<0>(&buffer[0]);
		// Find our root node
		root_node = doc.first_node("MyBeerJournal");
		// Iterate over the brewerys
		for (xml_node<> * brewery_node = root_node->first_node("Brewery");
				brewery_node; brewery_node = brewery_node->next_sibling()) {
			printf("I have visited %s in %s. ",
					brewery_node->first_attribute("name")->value(),
					brewery_node->first_attribute("position")->value(),
					brewery_node->first_attribute("Direction")->value());
			// Interate over the beers
			for (xml_node<> * beer_node = brewery_node->first_node("param");
					beer_node; beer_node = beer_node->next_sibling()) {
				printf("On %s, I tried their %s which is a %s. ",
						beer_node->first_attribute("dateSampled")->value(),
						beer_node->first_attribute("name")->value(),
						beer_node->first_attribute("description")->value());
				printf("I gave it the following review: %s",
						beer_node->value());
			}
			cout << endl;
		}
	}

	return 0;

}

int main(void) {
	x1 = 0;
	if (getuid() != 0) {
		printf("You must run this program as root. Exiting.\n");
		//  exit(EXIT_FAILURE);
	}
	xmlLoad1();
	// *******  start of original file test_syspoll.cpp ***********
	//P8.50/P8.14 gpio0_26 output 32x0 +26=26
	//P8.47/P8.16 gpio1_14 input  32x1 +14=46
	//P8.43//P8.17 gpio0_27 input 32x0 +27=27
	//p9.33/na  gpio3_18 input    32x3 +18=114
	//P8.44/P8.18 gpio2_1 output 32x2 +1=65
	//P8_71/na gpio2_0 output   32x2 +0=62
	//P8.53/P8.12 gpio1_12 input 32x1 +12=44
	//P9.28/P9.27 pr1_pru0_pru_r31_5 aka gpio3_19 input 32x3 +19=115
	//P9.31/P9.25 pr1_pru0_pru_r31_7 aka gpio3_21 input 32x3 +19=117
	//P8.46/P8.15 pr1_pru0_pru_r31_15 aka gpio1_15 input 32x1 +15=47
	//P8.52/P8.11 gpio1_13 input 32x1 +13=45
	//P9.53/P9.12 gpio1_28 output 32x1 +28=60
	//P8.32/P8.26 gpio1_29 output 32x1 +29=61
	//
	//P8.73/P9_15 gpio1_16 Output - bit 16 HYDRO ALRM 32x1 +16 = 48
	//P9_25 pru1_pru_r31_5 (IN) AKA gpio3_19  32x3 + 5=101

	inGPIO = new GPIO(46);        //button
	inGPIO->setDirection(INPUT);   //button is an input
	inGPIO->setEdgeType(RISING);   //wait for rising edge
	inGPIO->waitForEdge(&activateLED); //pass the function

	outGPIO = new GPIO(48);        //LED
	outGPIO->setDirection(OUTPUT); //LED is an output

	outGPIO->streamOpen();         //fast write to LED
	outGPIO->streamWrite(HIGH);     //turn the LED off

	cout << "You have 10 seconds to press the button:" << endl;
	cout << "Listening, but also doing something else..." << endl;
	// usleep(20000000);              //allow 10 seconds
	outGPIO->streamWrite(LOW);     //turn off the LED after 10 seconds
	outGPIO->streamClose();        //shutdown

	// *******  end of original file test_syspoll.cpp ***********

	pthread_t thread; //handle to thread
	const char *message1 = "thread 1";
	/*
	 //RK set pin direction to output
	 int GPIOPin = 48;
	 FILE *myOutputHandle = NULL;
	 char setValue[4], GPIOString[4], GPIOValue[64], GPIODirection[64];
	 sprintf(GPIOString, "%d", GPIOPin);
	 sprintf(GPIOValue, "/sys/class/gpio/gpio%d/value", GPIOPin);
	 sprintf(GPIODirection, "/sys/class/gpio/gpio%d/direction", GPIOPin);
	 //rk Export the pin
	 if ((myOutputHandle = fopen("/sys/class/gpio/export", "ab")) == NULL)
	 {
	 printf("Unable to export GPIO Pin\n");
	 return 1;
	 }
	 strcpy(setValue, GPIOString);
	 fwrite(&setValue, sizeof(char),2, myOutputHandle);
	 fclose(myOutputHandle);

	 //set the direction of the output
	 if ((myOutputHandle = fopen(GPIODirection, "rb+")) == NULL)
	 {
	 printf("Unable to open Direction handle\n");
	 return 1;
	 }
	 strcpy(setValue, "out");
	 fwrite(&setValue, sizeof(char), 3, myOutputHandle);
	 fclose(myOutputHandle);
	 */
	// Initialize structure used by prussdrv_pruintc_intc
	// PRUSS_INTC_INITDATA is found in pruss_intc_mapping.h
	tpruss_intc_initdata pruss_intc_initdata = PRUSS_INTC_INITDATA;

	// Allocate and initialize memory
	prussdrv_init();
	prussdrv_open(PRU_EVTOUT_0);

	// Map PRU's interrupts
	prussdrv_pruintc_init(&pruss_intc_initdata);

	// Load and execute the PRU program on the PRU
	prussdrv_exec_program(PRU_NUM,
			"../home/debian/gpioLEDButton/gpioLEDButton/ledButton.bin");

	// Wait for event completion from PRU, returns the PRU_EVTOUT_0 number
	int n = prussdrv_pru_wait_event(PRU_EVTOUT_0);
	printf("EBB PRU program completed, event number %d.\n", n);
	//create thread, pass ref addr of function and data
	iret1 = pthread_create(&thread, NULL, threadInputDetect, (void*) message1);
	if (iret1) {
		printf("failed to create thread");
		return 1;
	}
	// Disable PRU and close memory mappings
	//prussdrv_pru_disable(PRU_NUM);
	// prussdrv_exit ();
	return EXIT_SUCCESS;
}

